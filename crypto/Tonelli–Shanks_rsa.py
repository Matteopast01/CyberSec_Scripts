import math
p = 134062338207543205416292828203157284715767883862522854731350578237893909536493002450552946671939324441067287478936805404774378193826483565232877825608438356071778026028747769482705947814373262546670784467279112393161785627114703763994519904493955154796779910456105208492752308321381633449545817355584094905879

q = 1072498705660345643330342625625258277726143070900182837850804625903151276291944019604423573375514595528538299831494443238195025550611868521863022604867506848574224208229982155861647582514986100373366275738232899145294285016917630111956159235951641238374239283648841667942018466571053067596366538844672759246757


e = 65536

n = 143781684205389590010553134380517839058800341945951643846073964866638089941840311649560443936018651523969097963156967461283254598766182074871111838992505412018060806895987954123451280765476361794492545159179574840809250122003659558280110600523086073453593454301077841968713229457908552385130837363633326415539737047470209206503059358918963869499435888844742538325735934527946583750967433382950305568735891613971448304718286959958935899838597289022343543761412307578886703487271378307843705503950924777583617267981168241797094503210187196429696116962343134338115484421605658032478064979001495536373830780524756850984403
ct = 46766905580151190418167803800165852091449208838188815017482849743414798774037472205063154540852982120181535046497442975708675054661850345368214412560288799186010974747853074590266319384716017651039242789559088620469062334248752936623909170122538837706046848747293902057629461004056101310160515075424004388699736985826186428545210061908019625815935902910426753776224094948966703940659182850761935616877161509987727056412539500582660909361043016267769727096915307634477041094152402621008747657745037328401665898055629694301506033482146343496620423943272589768958861265192857140142751775400356925215981924417004378907958



def legendre(a, p):
    return pow(a, (p - 1) // 2, p)

def tonelli(n, p):
    assert legendre(n, p) == 1, "not a square (mod p)"
    q = p - 1
    s = 0
    while q % 2 == 0:
        q //= 2
        s += 1
    if s == 1:
        return pow(n, (p + 1) // 4, p)
    for z in range(2, p):
        if p - 1 == legendre(z, p):
            break
    c = pow(z, q, p)
    r = pow(n, (q + 1) // 2, p)
    t = pow(n, q, p)
    m = s
    t2 = 0
    while (t - 1) % p != 0:
        t2 = (t * t) % p
        for i in range(1, m):
            if (t2 - 1) % p == 0:
                break
            t2 = (t2 * t2) % p
        b = pow(c, 1 << (m - i - 1), p)
        r = (r * b) % p
        c = (b * b) % p
        t = (t * c) % p
        m = i
    return r


fi = (p-1) * (q-1)

if math.gcd(e, fi) == 1:
    d = pow(e, -1, fi)
    dec = pow(ct, d, n)
    print(f"plainext : {dec}")

else:
    print("\nGCD tra e e phi(n) non Ã¨ 1\n")
    
    print("Plaintext < q or Plaintext > p")
    valore = math.gcd(e, q-1)
    print(f"gcd(e, p-1) : {valore}")
    d = pow(e//valore, -1, (q-1)//valore)
    print(f"d : {d}")
    plain_4 = pow(ct, d, q) 
    print(f"plaintext**{valore} : {plain_4}")
    #print(f"plain_4 : {plain_4}")

    r = tonelli(plain_4, q)
    assert (r * r - plain_4) % q == 0
    #print("plain_4 = %d p = %d" % (plain_4, q))
    radice1 = r
    radice2 = q - r
    

    r = tonelli(radice1, q)
    assert (r * r - radice1) % q == 0
    #print("plain_4 = %d p = %d" % (plain_4, q))
    radiceA = r
    radiceB = q - r
    


    r = tonelli(radice2, q)
    assert (r * r - radice2) % q == 0
    #print("plain_4 = %d p = %d" % (plain_4, q))
    radiceC = r
    radiceD = q - r
    

    print(f"Risultati tonelli:\n{radiceA}\n{radiceB}\n{radiceC}\n{radiceD}")
