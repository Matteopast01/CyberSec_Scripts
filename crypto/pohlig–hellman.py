#!/usr/bin/env python

from sympy import primefactors, mod_inverse

# DHKE public parameters

# alpha ^ x = beta mod p

# Prime p
p = 78244737296323701708091142569062680832012147734404650078590391114054859290061421837516998655549776972299461276876623748922539131984799803433363562299977701808549255204262920151723624296938777341738751806450993015446712522509989316673420506749359414629957842716112900306643009542215969000431330219583111410996807066475261560303182609636056108367412324508444341178028289201803518093842982877662621552756279669241303362152895160479720040128335518247125849521099841272983588935580888630036283712163901558436498481482160712530124868714141094634892999056865426200254647241979548935087621308526547138125987102062688568486250939447065798353626745169380579442233006898444700264240321482823859842044524114576784795294818755525169192652108755230262128210258672754900845837728345782457465793874408469588052577208643754019053756394151041512099598925557724343099264685155934891439161866250113047185553511797406764115907248713405817594729550600082808324331387143679800355356811873430669962333651282822030473702042073141618450021084993659382646598194115178864433545186250667775794249961932761063071117967553887984011652643245393971

# Generator g
alpha = 2

# Order q
q = p-1

beta = 18505507394762138405569229773049416490248665445553789179777001813844572980340232306151454816811016239862429233746858355345200708818587035318114031176968797488338378403368956743655224280844755991799276823163620091509075066353234816336432035756258959969113554854164777784685407568157801941993525245101590019077628623233519764435392430464302890786464752601709054108317562430870898094722874737007756775347191363982192186158955664846912641643986470536945575324615115998926663436817092536842221398652048065615991134562154199117807026187890298644293301304555114970719989895038772279498541988267649169285599053324366525491435149800715498097227233637890031568482392004857442008444156236370202177904725591941224296920182831200253868571000619022395300279747438781467897159227236929848827561938860413875202580573003606515442786153080016543028003719309815478286802371261664421654668204661575062562593540903401719264342711607864789565422651862168855646626775002922875564328838618401860260315531188511367211465117247163198519370643566519454819093271596877955424205519054084815409201733775868606544349104798201671355818775628490156




def decode(aiPlaintext, iNumBits):
    bytes_array = []
    k = iNumBits // 8
    for num in aiPlaintext:
        for i in range(k):
            temp = num
            for j in range(i + 1, k):
                temp = temp % (2 ** (8 * j))
            letter = temp // (2 ** (8 * i))
            bytes_array.append(letter)
            num = num - (letter * (2 ** (8 * i)))
    decodedText = bytearray(b for b in bytes_array).decode('utf-8')
    return decodedText
    

# Square and Multiply
def sqm(a, b, n):
    res = 1
    binarray = [int(x) for x in bin(int(b))[2:]]
    for i in binarray:
        if i == 1:
            res = (res * res * a) % n
        else:
            res = (res * res) % n
    return res


def find_prime_factors(j):
    factors = []
    n = 2
    # Brute Force Primes
    while n <= j:
        if j % n == 0:
            # Found factor
            factors += [n]
            j //= n
        else:
            n += 1
    return factors


def calculate_subgrp_congruences(pub, pi):
    gi = sqm(alpha, q // pi, p)
    hi = sqm(beta, q // pi, p)
    # we are looking for: gi ^ di = hi mod p (di is the unknown)
    c = 1
    while c < p:
        if sqm(gi, c, p) % p == hi % p:
            return c
        c += 1
    return -1


def solve_crt(dlogs, factors):
    n = 1
    for i in factors:
        n *= i
    x = 0
    for i in range(len(dlogs)):
        yi = n // factors[i]
        zi = mod_inverse(yi, factors[i])
        x += dlogs[i] * yi * zi
    return x % n



def main():
    factors = find_prime_factors(q)
    dlogs = []
    print("The prime factors found are {}.".format(factors))
    for factor in factors:
        dlogs.append(calculate_subgrp_congruences(beta, factor))
    print("The Dlogs found are {}.".format(dlogs))
    key = solve_crt(dlogs, factors)
    print("The Private Key is {}.".format(key))
 


if __name__ == "__main__":
    main()
